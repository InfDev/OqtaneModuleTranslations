<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ShowCategoryFilter" xml:space="preserve">
    <value>Show Category Filter</value>
  </data>
  <data name="ShowAdminTools" xml:space="preserve">
    <value>Show Admin Tools</value>
  </data>
  <data name="TagAppearance.HelpText" xml:space="preserve">
    <value>Set the Appearance of the tag buttons</value>
  </data>
  <data name="NumberOfTagsInIndex.HelpText" xml:space="preserve">
    <value>The index is all tags used and grouped by frequency used</value>
  </data>
  <data name="MaxNumberItems.HelpText" xml:space="preserve">
    <value>Select the number of items to be collected. ie first 20 items.</value>
  </data>
  <data name="Categories.HelpText" xml:space="preserve">
    <value>Categories that can be a used to list items against</value>
  </data>
  <data name="PagerPosition" xml:space="preserve">
    <value>Pager position</value>
  </data>
  <data name="ShowSearchFeedback" xml:space="preserve">
    <value>Show Search Feedback</value>
  </data>
  <data name="AllowTagFilter" xml:space="preserve">
    <value>Allow Tag Filter</value>
  </data>
  <data name="ShowSearchFeedback.HelpText" xml:space="preserve">
    <value>Display the feedback from the search executed.</value>
  </data>
  <data name="PagerPosition.HelpText" xml:space="preserve">
    <value>Select where the pager should be placed.</value>
  </data>
  <data name="NewDuration" xml:space="preserve">
    <value>Keep "New" for :</value>
  </data>
  <data name="NumberOfTagsInIndex" xml:space="preserve">
    <value>Number Of Tags to display</value>
  </data>
  <data name="ShowTextSearch.HelpText" xml:space="preserve">
    <value>Show or hide the search entry.</value>
  </data>
  <data name="AllowTagFilter.HelpText" xml:space="preserve">
    <value>When set allows the tags items to be clicked are returns only those items</value>
  </data>
  <data name="ItemsPerPage.HelpText" xml:space="preserve">
    <value>Select the number of items to be rendered on the page.</value>
  </data>
  <data name="AllowDiscovery.HelpText" xml:space="preserve">
    <value>When set to yes the instance will appear in the Timelines selection list.  This is the only way the timeline will work.</value>
  </data>
  <data name="ShowTextSearch" xml:space="preserve">
    <value>Show Text Search</value>
  </data>
  <data name="Categories" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="TagRounded.HelpText" xml:space="preserve">
    <value>When selected with give the tags a rounded look.</value>
  </data>
  <data name="ChartNumberDisplay.HelpText" xml:space="preserve">
    <value>Select the number of items to display at the side  of the image</value>
  </data>
  <data name="NewDuration.HelpText" xml:space="preserve">
    <value>After pulished the item will stay "New" for set number of days</value>
  </data>
  <data name="ChartNumberDisplay" xml:space="preserve">
    <value>Chart Numbers</value>
  </data>
  <data name="SelectModule" xml:space="preserve">
    <value>Select Announcement Module</value>
  </data>
  <data name="TagAppearance" xml:space="preserve">
    <value>Tag Appearance</value>
  </data>
  <data name="AllowDiscovery" xml:space="preserve">
    <value>Allow Discovery</value>
  </data>
  <data name="ItemsPerPage" xml:space="preserve">
    <value>Items Per Page</value>
  </data>
  <data name="ShowCategoryFilter.HelpText" xml:space="preserve">
    <value>Show or hide the category selector</value>
  </data>
  <data name="MaxNumberItems" xml:space="preserve">
    <value>Maximum Number Items</value>
  </data>
</root>